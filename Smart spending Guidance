Integrating a "Smart Spending Guidance" feature into a finance tool involves developing both the backend logic and the frontend interface. Below is a simplified example code snippet using Python and a hypothetical framework. This example focuses on the backend logic, which can be expanded based on the requirements.

```python
class SmartSpendingGuidance:
    def __init__(self, user_data):
        self.user_data = user_data
        self.insights = []

    def analyze_investments(self):
        # Analyze user's investment portfolio
        # This is a simplified example
        portfolio_performance = self.user_data.get('portfolio_performance')
        market_trends = self.user_data.get('market_trends')
        if portfolio_performance and market_trends:
            # Calculate customized portfolio recommendations
            self.insights.append("Customized Portfolio Recommendations based on your current performance and market trends.")
        else:
            self.insights.append("Insufficient data to analyze investments.")

    def generate_market_notifications(self):
        # Generate timely market notifications
        market_updates = self.user_data.get('market_updates')
        if market_updates:
            self.insights.append("Timely Market Notifications: " + ", ".join(market_updates))
        else:
            self.insights.append("No current market updates available.")

    def analyze_spending_pattern(self):
        # Analyze user's spending pattern
        spending_data = self.user_data.get('spending_data')
        if spending_data:
            # Example analysis
            high_expenditure = max(spending_data, key=spending_data.get)
            self.insights.append(f"Your highest expenditure category is {high_expenditure}. Consider reviewing your expenses in this category.")
        else:
            self.insights.append("No spending data available for analysis.")

    def provide_fund_manager_reviews(self):
        # Provide fund manager reviews and ratings
        fund_manager_reviews = self.user_data.get('fund_manager_reviews')
        if fund_manager_reviews:
            self.insights.append("Fund Manager Reviews: " + ", ".join(fund_manager_reviews))
        else:
            self.insights.append("No fund manager reviews available.")

    def compare_peer_investments(self):
        # Compare with peer investments
        peer_comparisons = self.user_data.get('peer_comparisons')
        if peer_comparisons:
            self.insights.append("Peer Investment Comparison: " + ", ".join(peer_comparisons))
        else:
            self.insights.append("No peer comparison data available.")

    def recommend_eco_friendly_spending(self):
        # Recommend eco-friendly spending options
        eco_friendly_options = self.user_data.get('eco_friendly_options')
        if eco_friendly_options:
            self.insights.append("Eco-friendly Spending Options: " + ", ".join(eco_friendly_options))
        else:
            self.insights.append("No eco-friendly options available.")

    def get_guidance(self):
        self.analyze_investments()
        self.generate_market_notifications()
        self.analyze_spending_pattern()
        self.provide_fund_manager_reviews()
        self.compare_peer_investments()
        self.recommend_eco_friendly_spending()
        return self.insights

# Example usage
user_data = {
    'portfolio_performance': {...},
    'market_trends': {...},
    'market_updates': ['Stock A is up 5%', 'Crypto B is down 10%'],
    'spending_data': {'Food': 200, 'Transport': 100, 'Entertainment': 150},
    'fund_manager_reviews': ['Fund Manager X has a 4.5-star rating', 'Fund Manager Y is highly recommended'],
    'peer_comparisons': ['Your portfolio is outperforming 70% of peers'],
    'eco_friendly_options': ['Invest in renewable energy', 'Support sustainable brands']
}

guidance = SmartSpendingGuidance(user_data)
print(guidance.get_guidance())
```

This example provides a starting point for developing a Smart Spending Guidance feature. You can extend it with more sophisticated algorithms, user interface integration, and real-time data updates to make it fully functional and valuable to users.
